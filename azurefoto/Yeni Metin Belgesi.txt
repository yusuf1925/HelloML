1. bilgisayardan kaydettiðimiz arff dosyasýný getirdik
2. kaydettiðimiz dosyanýn içine sað týk yapýp baktýk.
3. Kolonlarý seçmek için select column in dataseti týkladýk. saðda .çýkan yere launch column selector u seçtik
4.veriyi split ile böldik
. train mödel kýsmýnýn sol kýsmýndan. train edilecek modeli %66 olarak seçtik
5. Score model ve evaluate model ile birleþtirdik. Scorun 2. kismini split data dan çektik
6.save ve run dedikten sonra adým adým iþlendiðini görüyoruz.
7. evaluate e sað týkladýktan sonra visualize dersek sonuçlarý verir.
8. set up web service e týkladýk. Trained model hazýrlanmýþ oldu.
9, modelimiz artýk price ý verdiðine göre. Artýk kaldýrabiliriz.
10. deploy dedik ve bu sayfa çýktý. içersinde apikey görülebilir.
11. request-respond a týkladýk ve nasýl kullanýlacaðý hakkýnda bilgiler var.
12. örnek c# kullanýmý  bu sayfada mevcuttur.
13. test e týkladýk.
14 . ekranda veriyi verdi.
15. c# üzerinde console application sonucu

https://www.youtube.com/watch?v=csFDLUYnq4w
azureml.net

rAB+L2aaaaaaaaaaaaaaaaaaaaaaa7l/sQlda170eaaaaaaaaaaIUf/cK9Uu+aaaaaaaaaaaaa9sQ==
	

https://ussouthcentral.services.azureml.net/workspaces/b25aaaaaaaaaaaaaaa1e0/services/0daaaaaaaaaaaaaaaaaaaea8c1/execute?api-version=2.0&details=true

// This code requires the Nuget package Microsoft.AspNet.WebApi.Client to be installed.
// Instructions for doing this in Visual Studio:
// Tools -> Nuget Package Manager -> Package Manager Console
// Install-Package Microsoft.AspNet.WebApi.Client

using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace CallRequestResponseService
{

    public class StringTable
    {
        public string[] ColumnNames { get; set; }
        public string[,] Values { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            InvokeRequestResponseService().Wait();
        }

        static async Task InvokeRequestResponseService()
        {
            using (var client = new HttpClient())
            {
                var scoreRequest = new
                {

                    Inputs = new Dictionary<string, StringTable> () { 
                        { 
                            "input1", 
                            new StringTable() 
                            {
                                ColumnNames = new string[] {"no-of-cylinder", "normalized-loses", "engine-type", "brand", "engine-size", "engine-location", "width", "hp", "peak-rpm", "curb-weight"},
                                Values = new string[,] {  { "eight", "0", "dohc", "alfa-romero", "0", "front", "0", "0", "0", "0" },  { "eight", "0", "dohc", "alfa-romero", "0", "front", "0", "0", "0", "0" },  }
                            }
                        },
                    },
                    GlobalParameters = new Dictionary<string, string>() {
}
                };
                const string apiKey = "abc123"; // Replace this with the API key for the web service
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue( "Bearer", apiKey);

                client.BaseAddress = new Uri("https://ussouthcentral.services.azureml.net/workspaces/b259c941390240c9b260bc63a0b831e0/services/0de907eb635c4de7b7a2ff15261ea8c1/execute?api-version=2.0&details=true");
                
                // WARNING: The 'await' statement below can result in a deadlock if you are calling this code from the UI thread of an ASP.Net application.
                // One way to address this would be to call ConfigureAwait(false) so that the execution does not attempt to resume on the original context.
                // For instance, replace code such as:
                //      result = await DoSomeTask()
                // with the following:
                //      result = await DoSomeTask().ConfigureAwait(false)


                HttpResponseMessage response = await client.PostAsJsonAsync("", scoreRequest);

                if (response.IsSuccessStatusCode)
                {
                    string result = await response.Content.ReadAsStringAsync();
                    Console.WriteLine("Result: {0}", result);
                }
                else
                {
                    Console.WriteLine(string.Format("The request failed with status code: {0}", response.StatusCode));

                    // Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
                    Console.WriteLine(response.Headers.ToString());

                    string responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(responseContent);
                }
            }
        }
    }
}
